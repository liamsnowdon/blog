[
    {
        "id": 7,
        "file": "serving-github-assets-via-cdn",
        "ogImageUrl": "/assets/images/posts/serving-github-assets-cdn/serving-github-assets-cdn.jpg",
        "thumbnailImageUrl": "/assets/images/posts/serving-github-assets-cdn/serving-github-assets-cdn-thumbnail.jpg",
        "headerImageUrl": "/assets/images/posts/serving-github-assets-cdn/serving-github-assets-cdn-header.jpg",
        "author": "Liam Snowdon",
        "title": "Serving GitHub assets via a CDN for improved performance",
        "intro": "Using a content distribution network increases performance by serving cached resources from different servers around the world.",
        "datePosted": "18/2/2021",
        "category": {
            "id": 1,
            "file": "html",
            "imageUrl": "/assets/images/categories/html/html.jpg",
            "name": "HTML",
            "intro": "The markup language for displaying content for web pages. With it, you can show text, images, videos and more. If you're seeing something on a web site, it is made up of HTML.",
            "faClass": "fab fa-html5"
        },
        "tags": [],
        "content": "<p>It is already common to load third-party libraries, frameworks and packages via a CDN such a <strong>jsdelivr</strong> or <strong>unpkg</strong>. For example, you can use the following script tag to load jQuery onto the page without having it in your project's directory:</p>\n<pre class=\"language-markup\"><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js\"&gt;&lt;/script&gt;</code></pre>\n<p>Jsdelivr also lets you load a file from a GitHub repository in a similar way:</p>\n<pre class=\"language-markup\"><code>&lt;script src=\"https://cdn.jsdelivr.net/gh/user/repo@version/file\"&gt;&lt;/script&gt;\n\n&lt;!-- images --&gt;\n&lt;img src=\"https://cdn.jsdelivr.net/gh/liamsnowdon/blog@gh-pages/assets/images/posts/sass-7-1-pattern/sass-7-1-pattern-thumbnail.jpg\" /&gt;\n\n&lt;!-- css --&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/liamsnowdon/blog@gh-pages/assets/css/styles-9609126007.css\"&gt;\n\n&lt;!-- javascript --&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/gh/liamsnowdon/blog@gh-pages/assets/js/main-8c6edcafde.js\"&gt;&lt;/script&gt;</code></pre>\n<p>The URL is formed of:</p>\n<ol>\n<li><strong>https://cdn.jsdelivr.net/gh/</strong> - beginning of URL, the \"<strong>gh</strong>\" part tells the CDN it is a GitHub file</li>\n<li><strong>user/</strong>&nbsp;- GitHub username</li>\n<li><strong>repo/</strong> - repository name</li>\n<li><strong>@version/</strong> - the branch, release, etc</li>\n<li><strong>file</strong> - the path to the file</li>\n</ol>\n<p>GTmetrix explains the advantages of using a CDN <a title=\"GTmetrix: Using a Content Delivery Network\" href=\"https://gtmetrix.com/use-a-content-delivery-network-cdn.html\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<blockquote>\n<p>A Content Delivery Network reduces latency by caching your page's static resources across different servers around the world.</p>\n<p>Depending on where your visitors are located, your page content is served from the closest server/CDN node.</p>\n</blockquote>\n<p>&nbsp;</p>\n<h2>Tips</h2>\n<p>Naturally, since the files are heavily cached it means any changes to that file will not be reflected in the CDN. A way around this is to use <strong>versioning</strong>. For example, on this blog I use the Gulp plugin <a title=\"gulp-rev\" href=\"https://www.npmjs.com/package/gulp-rev\" target=\"_blank\" rel=\"noopener\">gulp-rev</a> which adds a hash to the filename on build if the file has changed, turning <code class=\"b-inline-code\">styles.scss</code> into <code class=\"b-inline-code\">styles-9609126007.css</code>.&nbsp;</p>\n<p>Another tip is to create a helper function that adds this CDN link to an asset URL. I created a Nunjucks macro to handle this:&nbsp;</p>\n<pre class=\"language-markup\"><code>&lt;!-- macros/asset-loader.njk --&gt;\n{% macro image(path) %}{{ data.env.cdnHost }}{{ path }}{% endmacro %}\n\n&lt;!-- pages/index.njk --&gt;\n&lt;img src=\"{{ assetLoader.image(post.thumbnailImageUrl) }}\" alt=\"{{ post.title }}\" /&gt;\n\n&lt;!-- index.html --&gt;\n&lt;img src=\"https://cdn.jsdelivr.net/gh/liamsnowdon/blog@gh-pages/assets/images/posts/sass-7-1-pattern/sass-7-1-pattern-thumbnail.jpg\" class=\"c-recent-post__image\" alt=\"Using the 7-1 pattern for better Sass architecture\"&gt;</code></pre>\n<p>I wrote a post about using Nunjucks with Gulp <a title=\"Precompiling Nunjucks templates with Gulp\" href=\"https://blog.liamsnowdon.uk/posts/precompiling-nunjucks\">here</a>, which I use for this blog.</p>\n<p>&nbsp;</p>\n<h2>Conclusion</h2>\n<p>Using a CDN to serve cached static resources is a great way to boost page performance by providing a faster page experience to visitors. Using it for as many images, JavaScript and CSS files as possible will ensure they are loaded as fast as possible.</p>"
    },
    {
        "id": 6,
        "file": "sass-7-1-pattern",
        "ogImageUrl": "/assets/images/posts/sass-7-1-pattern/sass-7-1-pattern.jpg",
        "thumbnailImageUrl": "/assets/images/posts/sass-7-1-pattern/sass-7-1-pattern-thumbnail.jpg",
        "headerImageUrl": "/assets/images/posts/sass-7-1-pattern/sass-7-1-pattern-header.jpg",
        "author": "Liam Snowdon",
        "title": "Using the 7-1 pattern for better Sass architecture",
        "intro": "As with everything, keeping your Sass files organised is key for easy and efficient working. The 7-1 pattern can help with this.",
        "datePosted": "24/1/2021",
        "category": {
            "id": 2,
            "file": "css",
            "imageUrl": "/assets/images/categories/css/css.jpg",
            "name": "CSS",
            "intro": "Using stylesheets, a page can be styled to your designs and imagination. Whether it's layout, colour themes, typography or input fields, CSS will play the role of how your site will look.",
            "faClass": "fab fa-css3-alt"
        },
        "tags": [
            {
                "id": 3,
                "file": "sass",
                "imageUrl": "/assets/images/tags/sass.jpg",
                "name": "Sass",
                "intro": "Describing itself as \"CSS with superpowers\", Sass is one of the most popular CSS pre-processors adding a rich number of features to extend its limits."
            }
        ],
        "content": "<p>Despite the pure joy I get when having to dive into a giant mess of a CSS file trying to find a specific set of styles for a component, I much prefer having everything split across multiple files like my JavaScript. This is very common to do in Sass with <code class=\"b-inline-code\">@import</code> -ing Sass files into another. The 7-1 pattern is a common architecture pattern to use when splitting out Sass files into different directories. These are usually:</p>\n<ul>\n<li>abstracts</li>\n<li>base</li>\n<li>components</li>\n<li>layout</li>\n<li>pages</li>\n<li>themes</li>\n<li>vendors</li>\n</ul>\n<p>&nbsp;</p>\n<h2>Abstracts</h2>\n<p>Sometimes called utilities instead, abstracts holds many of Sass' features like variables, mixins, functions, etc. They will usually not compile into anything in the output CSS but are used in the other Sass files like a button making use of a background-color variable called <code class=\"b-inline-code\">$button-background: #1997c6</code>.</p>\n<ul>\n<li><code class=\"b-inline-code\">_variables.scss</code></li>\n<li><code class=\"b-inline-code\">_mixins.scss</code></li>\n<li><code class=\"b-inline-code\">_functions.scss</code></li>\n<li><code class=\"b-inline-code\">_placeholders.scss</code></li>\n</ul>\n<p>&nbsp;</p>\n<h2>Base</h2>\n<p>Common styles that would be used across the whole app will be here, hence the name \"base\". General styles against tags like a reset or images that don't belong anywhere else would go here. The general idea for base styles is they could be used anywhere.</p>\n<ul>\n<li><code class=\"b-inline-code\">_base.scss</code></li>\n<li><code class=\"b-inline-code\">_helpers.scss</code></li>\n<li><code class=\"b-inline-code\">_reset.scss</code></li>\n<li><code class=\"b-inline-code\">_typography.scss</code></li>\n</ul>\n<p>&nbsp;</p>\n<h2>Components</h2>\n<p>This is where the majority of the files will be since the app should consist of a lot of small components/widgets, being as small as a single &lt;button&gt; tag. It's okay to have a large number of component files; it splits out your styles well and at the end of the day it's likely all compiled into a single CSS file.</p>\n<ul>\n<li><code class=\"b-inline-code\">_buttons.scss</code></li>\n<li><code class=\"b-inline-code\">_cards.scss</code></li>\n<li><code class=\"b-inline-code\">_form-inputs.scss</code></li>\n<li><code class=\"b-inline-code\">_loaders.scss</code></li>\n<li><code class=\"b-inline-code\">_overlays.scss</code></li>\n</ul>\n<p>&nbsp;</p>\n<h2>Layout</h2>\n<p>Elements that would be considered more of a page layout widget like a navigation bar or footer would be here. They may appear on every page like a boilerplate and is crucial for laying out the content of the page.</p>\n<ul>\n<li><code class=\"b-inline-code\">_header.scss</code></li>\n<li><code class=\"b-inline-code\">_footer.scss</code></li>\n<li><code class=\"b-inline-code\">_sidebar.scss</code></li>\n<li><code class=\"b-inline-code\">_navigation.scss</code></li>\n<li><code class=\"b-inline-code\">_grid.scss</code></li>\n</ul>\n<p>&nbsp;</p>\n<h2>Pages</h2>\n<p>Page-specific styles go in the pages directory, such as homepage, product page, search page, etc. You may decide to compile page-specific styles into separate stylesheets and load them on their appropriate pages to avoid the user loading unnecessary styles if there are a lot.</p>\n<ul>\n<li><code class=\"b-inline-code\">homepage.scss</code></li>\n<li><code class=\"b-inline-code\">search.scss</code></li>\n<li><code class=\"b-inline-code\">product.scss</code></li>\n<li><code class=\"b-inline-code\">category.scss</code></li>\n</ul>\n<p>&nbsp;</p>\n<h2>Themes</h2>\n<p>Some sites may have different themes: GitHub for example (and many others) have a dark theme, which is implemented with CSS custom properties that get overridden by a data attribute or class, or even by using the <code class=\"b-inline-code\">prefers-color-scheme</code> media feature.</p>\n<ul>\n<li><code class=\"b-inline-code\">_light.scss</code></li>\n<li><code class=\"b-inline-code\">_dark.scss</code></li>\n</ul>\n<p>&nbsp;</p>\n<h2>Vendors</h2>\n<p>Any third-party libraries and packages used would have their styles placed here. As a general rule, these files should never be edited directly, and if possible imported directly from the package such as <code class=\"b-inline-code\">node_modules</code>. If changes need to be set for design reasons, bug fixes, etc, then an additional directory called <code class=\"b-inline-code\">vendors-extensions</code> should be created and those overrides should be placed in there.</p>\n<h6>vendors</h6>\n<ul>\n<li><code class=\"b-inline-code\">_choices.scss</code></li>\n<li><code class=\"b-inline-code\">_prism.scss</code></li>\n<li><code class=\"b-inline-code\">_swiper.scss</code></li>\n</ul>\n<h6>vendors-extensions</h6>\n<ul>\n<li><code class=\"b-inline-code\">_swiper.scss</code></li>\n</ul>\n<p>&nbsp;</p>\n<h2>Main File</h2>\n<p>All the above directories' content will be imported into one main file. It's important to use the right order when importing to make sure the abstracts can be accessed properly and any cascading styles behave as expected. The final Sass file may look like this:</p>\n<pre class=\"language-css\"><code>/* app.scss */\n\n// Abstract\n@import 'abstracts/variables';\n@import 'abstracts/functions';\n@import 'abstracts/mixins';\n\n// Themes\n@import 'themes/dark';\n@import 'themes/light';\n\n// Base\n@import 'base/reset';\n@import 'base/helpers';\n@import 'base/base';\n@import 'base/typography';\n\n// Layout\n@import 'layout/content';\n@import 'layout/footer';\n@import 'layout/header';\n@import 'layout/grid';\n@import 'layout/navigation';\n@import 'layout/wrapper';\n\n// Components\n@import 'components/banner';\n@import 'components/block';\n@import 'components/breadcrumbs';\n@import 'components/buttons';\n@import 'components/card';\n@import 'components/modals';\n@import 'components/pod';\n@import 'components/tabs';\n@import 'components/tooltip';\n\n// Pages\n@import 'pages/homepage';\n@import 'pages/post';\n\n// Vendors\n@import 'vendors/fontawesome';\n@import 'vendors/prism';\n@import 'vendors/swiper';\n\n// Vendors Extensions\n@import 'vendors-extensions/swiper';</code></pre>\n<p>&nbsp;</p>\n<h2>Conclusion</h2>\n<p>Splitting out the CSS across multiple files in an organised architecture makes it a lot easier to manage and find exactly what you're looking for. Each file is dedicated to its own thing rather than having a file contain a bunch of other styles too.</p>"
    },
    {
        "id": 5,
        "file": "precompiling-nunjucks",
        "ogImageUrl": "/assets/images/posts/precompiling-nunjucks/precompiling-nunjucks.jpg",
        "thumbnailImageUrl": "/assets/images/posts/precompiling-nunjucks/precompiling-nunjucks-thumbnail.jpg",
        "headerImageUrl": "/assets/images/posts/precompiling-nunjucks/precompiling-nunjucks-header.jpg",
        "author": "Liam Snowdon",
        "title": "Pre-compiling Nunjucks templates with Gulp",
        "intro": "Nunjucks is great for templating your HTML, but it's even better when that markup is pre-compiled at build time.",
        "datePosted": "5/1/2021",
        "category": {
            "id": 3,
            "file": "javascript",
            "imageUrl": "/assets/images/categories/javascript/javascript.jpg",
            "name": "JavaScript",
            "intro": "The programming language of the web, JavaScript gives you the power to control a web page to your heart's content; updating the DOM, sending asynchronous requests, dynamic content and more interactive elements like carousels, maps and even games.",
            "faClass": "fab fa-js"
        },
        "tags": [
            {
                "id": 2,
                "file": "workflow",
                "imageUrl": "/assets/images/tags/workflow.jpg",
                "name": "Workflow",
                "intro": "A good workflow will help you perform your development tasks as easy as possible."
            }
        ],
        "content": "<p>When your site is spanned across multiple pages and sections, odds are that a lot of your HTML will end up getting duplicated across files. Most commonly it will be your &lt;head&gt; tag, a navigation bar or slider, a footer, etc. This is where a templating engine will come in handy. There are many templating engines out there, some have advantages over the other so you want to find the right one for your needs. To name a few:</p>\n<ul>\n<li>EJS</li>\n<li>Handlebars</li>\n<li>Mustache</li>\n<li>Nunjucks</li>\n<li>...and many more.</li>\n</ul>\n<p>In this post I will be focusing on using Nunjucks and, more specifically, how to integrate it with Gulp for precompiling pages. Nunjucks files have the extension <code class=\"b-inline-code\">.njk</code>, for example: <code class=\"b-inline-code\">index.njk</code>.</p>\n<p>To begin with, let's take a quick look at some of the main features Nunjucks offers.</p>\n<p>&nbsp;</p>\n<h2>Features</h2>\n<h3>Template Inheritance</h3>\n<p>Nunjucks templates can inherit or <strong>extend</strong>&nbsp;from its parent template. This allows you to create boilerplates for your pages, whether that be the core markup with your metadata, stylesheets and scripts, or a particular page layout like a product page. This is done with two important tags:</p>\n<ol>\n<li>block</li>\n<li>extends</li>\n</ol>\n<p>A parent template may look like this:</p>\n<pre class=\"language-markup\"><code>&lt;!-- base.njk --&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    \n    &lt;title&gt;{% block pageTitle %}Page Title{% endblock %}&lt;/title&gt;\n\n    &lt;link rel=\"stylesheet\" href=\"/assets/css/styles.css\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n    {% block content %}{% endblock %}\n\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>You will see there are two blocks above: <strong>pageTitle</strong> and <strong>content</strong>. Blocks are sections that can be overridden by child templates. Let's see how that works with the&nbsp;<strong>extends</strong> tag.</p>\n<pre class=\"language-markup\"><code>&lt;!-- product-listing.njk --&gt;\n\n{% extends \"base.njk\" %}\n\n{% block pageTitle %}Browse our range of products{% endblock %}\n\n{% block content %}\n  &lt;header class=\"l-header\"&gt;\n    &lt;div class=\"l-header__content\"&gt;\n      &lt;h1 class=\"l-header__heading\"&gt;Our Products&lt;/h1&gt;\n    &lt;/div&gt;\n  &lt;/header&gt;\n{% endblock %}</code></pre>\n<p>The&nbsp;<strong>extends</strong> tag is used to tell Nunjucks what file to inherit from as its parent. The <strong>block</strong> tags are then used to inject that content where the blocks appear in the inherited template. Take a look at the output:</p>\n<pre class=\"language-markup\"><code>&lt;!-- product-listing.html --&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    \n    &lt;title&gt;Browse our range of products&lt;/title&gt;\n\n    &lt;link rel=\"stylesheet\" href=\"/assets/css/styles.css\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n    &lt;header class=\"l-header\"&gt;\n      &lt;div class=\"l-header__content\"&gt;\n        &lt;h1 class=\"l-header__heading\"&gt;Categories&lt;/h1&gt;\n      &lt;/div&gt;\n    &lt;/header&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>&nbsp;</p>\n<h3>Partials</h3>\n<p>One of the most popular features of templating engines is the ability to include partials into your templates. These are commonly headers, navigations, pods, footers, etc. This is done by using the&nbsp;<strong>include</strong> tag, like this:</p>\n<pre class=\"language-markup\"><code>{% include \"partials/sticky-navigation.njk\" %}</code></pre>\n<p>This would inject that partial template wherever it is used. Oftentimes though you will need to render a partial with some data, for example a product pod will have the product's name, image, description, etc. This is done by using macros.</p>\n<p>&nbsp;</p>\n<h3>Macros</h3>\n<p>Macros can be thought of as partials that have access to the data that you pass it when it is called. It is called similarly to a standard function where you pass in the data as a parameter. Consider this macro:</p>\n<pre class=\"language-markup\"><code>&lt;!-- product-macro.njk --&gt;\n\n{% macro pod(product) %}\n  &lt;div class=\"c-pod\"&gt;\n    &lt;div class=\"c-pod__image c-pod__image--{{ product.alias }}\"&gt;&lt;/div&gt;\n    &lt;div class=\"c-pod__content\"&gt;\n      &lt;h5 class=\"c-pod__title\"&gt;{{ product.name }}&lt;/h4&gt;\n      &lt;p class=\"c-pod__description\"&gt;\n        {{ product.description }}\n      &lt;/p&gt;\n      \n      &lt;div class=\"c-pod__button-holder\"&gt;\n        &lt;a class=\"c-button\" href=\"/products/{{ product.alias }}\"&gt;Shop now&lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n{% endmacro %}</code></pre>\n<p>This product pod displays the product's image, name, description and a link to the product page. We can now use this macro in our templates. If it's used in a different file it will need to be imported using the&nbsp;<strong>import</strong> tag. It is then called like a standard function.</p>\n<pre class=\"language-markup\"><code>&lt;!-- business-cards.njk --&gt;\n\n{% extends 'product-page.njk' %}\n\n{% import 'macros/product-macro.njk' as productMacro %}\n\n&lt;!-- you can use the set tag to set a variable. You will notice the \"| getById(8)\" filter at the end. We will discuss this in the next section --&gt;\n{% set product = products | getById(8) %}\n\n{% block productPod %}\n  {{ productMacro.pod(product) }}\n{% endblock %}</code></pre>\n<p>Looking inside the&nbsp;<strong>productPod</strong> block, it would render something like:</p>\n<pre class=\"language-markup\"><code>&lt;!-- business-cards.html --&gt;\n\n&lt;div class=\"c-pod\"&gt;\n    &lt;div class=\"c-pod__image c-pod__image--business-cards\"&gt;&lt;/div&gt;\n    &lt;div class=\"c-pod__content\"&gt;\n      &lt;h5 class=\"c-pod__title\"&gt;Business Cards&lt;/h4&gt;\n      &lt;p class=\"c-pod__description\"&gt;\n        This is the business cards description.\n      &lt;/p&gt;\n      \n      &lt;div class=\"c-pod__button-holder\"&gt;\n        &lt;a class=\"c-button\" href=\"/products/business-cards\"&gt;Shop now&lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;</code></pre>\n<p>You can see how powerful macros can be when rendering partials with custom data.</p>\n<p>&nbsp;</p>\n<h3>Filters</h3>\n<p>Filters are another powerful feature of Nunjucks and allow you to manipulate data to JavaScript's limit. There are a number of built-in filters in Nunjucks but you are able to add custom filters for your particular needs. It uses the same syntax as filters from popular frameworks like Vue and Angular:</p>\n<pre class=\"language-markup\"><code>&lt;!-- index.njk --&gt;\n\n&lt;!-- built in filter for transforming string to lowercase --&gt;\n{{ product.name | lower }}\n\n&lt;!-- custom filter for getting an object from an array by its ID --&gt;\n{% set product = products | getById(8) %}</code></pre>\n<p>&nbsp;</p>\n<h2>Integrating Nunjucks with Gulp</h2>\n<p>Using Nunjucks in the browser means all the templating is done on the client side at runtime. With Gulp, we can build all the pages using templates, partials and macros at buildtime so all the HTML files are all ready for when a user visits the page. Note: we will be using Gulp 4 in the following code snippets, feel free to rewrite it in an older version if you prefer.</p>\n<p>The Gulp plugin we will be using is&nbsp;<strong>gulp-nunjucks-render</strong>. Let's install it with NPM and add it to our gulpfile.</p>\n<pre class=\"language-markup\"><code>npm install gulp-nunjucks-render --save-dev</code></pre>\n<pre class=\"language-javascript\"><code>const nunjucksRender = require('gulp-nunjucks-render');\n\nfunction nunjucks () {\n    // Gets .html and .njk files in pages folder\n    return gulp.src('pages/**/*.+(html|njk)')\n        // Renders template with nunjucks\n        .pipe(nunjucksRender({\n            path: ['templates']\n        }))\n        .pipe(gulp.dest('./'));\n}\n\nexports.nunjucks = nunjucks;</code></pre>\n<p>Nothing special here with the function, it behaves like any other Gulp task.</p>\n<ol>\n<li>Nunjucks files are sourced from the pages directory and looks for <code class=\"b-inline-code\">.html</code> or <code class=\"b-inline-code\">.njk</code> files (it will work for either)</li>\n<li>Pipes it through <code class=\"b-inline-code\">gulp-nunjucks-render</code> plugin and we specify the directory the templates are located (these are the partials, macros, boilerplates, etc).</li>\n<li>The built HTML files are placed in the destination directory.</li>\n</ol>\n<p>The difference between&nbsp;<strong>pages</strong> and&nbsp;<strong>templates</strong> is the built HTML files come from the&nbsp;<strong>pages</strong> nunjucks files, whereas the&nbsp;<strong>templates</strong> files are included in others.</p>\n<p>&nbsp;</p>\n<h3>Injecting data into our pages and templates</h3>\n<p>We discussed macros earlier and how they accept data when rendering, but where does this data come from? With Gulp we can globally add data to all Nunjucks files. We can store this data in JSON files. Let's continue with the product theme and say we have the following JSON file:</p>\n<pre class=\"language-javascript\"><code>[\n    {\n        \"id\": 1,\n        \"name\": \"Business Cards\",\n        \"alias\": \"business-cards\",\n        \"description\": \"This is the business cards description.\" \n    },\n    {\n        \"id\": 2,\n        \"name\": \"Postcards\",\n        \"alias\": \"postcards\",\n        \"description\": \"This is the postcards description.\" \n    },\n]</code></pre>\n<p>&nbsp;To get this data into the Nunjucks files, we can use the <code class=\"b-inline-code\">manageEnv</code> property when piping through in the Gulp task. We will use <code class=\"b-inline-code\">fs</code> to read the JSON file.</p>\n<pre class=\"language-javascript\"><code>const fs = require('fs');\n\nconst manageEnvironment = (environment) =&gt; {\n    const products = JSON.parse(fs.readFileSync('products.json'));\n\n    environment.addGlobal('data', {\n        products\n    });\n};\n\nfunction nunjucks () {\n    // Gets .html and .njk files in pages folder\n    return gulp.src('pages/**/*.+(html|njk)')\n        // Renders template with nunjucks\n        .pipe(nunjucksRender({\n            path: ['templates'],\n            manageEnv: manageEnvironment\n        }))\n        .pipe(gulp.dest('./'));\n}</code></pre>\n<p>When in any Nunjucks file, including partials and macros, you now have access to the products under <code class=\"b-inline-code\">data.products</code>.</p>\n<p>&nbsp;</p>\n<h3>Adding custom filters</h3>\n<p>We can add custom filters inside this <code class=\"b-inline-code\">manageEnv</code> property too. Instead of using the <code class=\"b-inline-code\">addGlobal</code> method, <code class=\"b-inline-code\">addFilter</code> is used.</p>\n<pre class=\"language-javascript\"><code>environment.addFilter('getById', (array, id) =&gt; {\n    return array.find(item =&gt; item.id === id);\n});</code></pre>\n<p>Now we can make use of that filter in Nunjucks tags.</p>\n<pre class=\"language-markup\"><code>&lt;!-- this will return the business cards object from products.json --&gt;\n{% set product = data.products | getById(1) %}</code></pre>"
    },
    {
        "id": 4,
        "file": "mobile-button-hover-states",
        "ogImageUrl": "/assets/images/posts/mobile-button-hover-states/mobile-button-hover-states.jpg",
        "thumbnailImageUrl": "/assets/images/posts/mobile-button-hover-states/mobile-button-hover-states-thumbnail.jpg",
        "headerImageUrl": "/assets/images/posts/mobile-button-hover-states/mobile-button-hover-states-header.jpg",
        "author": "Liam Snowdon",
        "title": "Handling button hover states for touchscreen devices",
        "intro": "On mobile devices hover states tend to stick unlike desktop. The workaround is to use a special media query.",
        "datePosted": "22/12/2020",
        "category": {
            "id": 2,
            "file": "css",
            "imageUrl": "/assets/images/categories/css/css.jpg",
            "name": "CSS",
            "intro": "Using stylesheets, a page can be styled to your designs and imagination. Whether it's layout, colour themes, typography or input fields, CSS will play the role of how your site will look.",
            "faClass": "fab fa-css3-alt"
        },
        "tags": [
            {
                "id": 1,
                "file": "responsive",
                "imageUrl": "/assets/images/tags/responsive.jpg",
                "name": "Responsive",
                "intro": "Having a responsive website means it will function on a range of devices: mobile, tablet, desktop, etc."
            }
        ],
        "content": "<p>On mobile and touchscreen devices, when an element with a <code class=\"b-inline-code\">:hover</code> pseudo-class is pressed the hover state styles will persist even after the pointing device has been released. This might not be noticeable in many cases if a button takes you to another page, however if not, the issue will arise. This can be solved with using a <strong>hover media query</strong>.</p>\n<p>The W3 spec defines it as the following:</p>\n<blockquote>\n<p>The hover media feature is used to query the user&rsquo;s ability to hover over elements on the page with the primary pointing device. If a device has multiple pointing devices, the&nbsp;hover media feature must reflect the characteristics of the &ldquo;primary&rdquo; pointing device, as determined by the user agent.</p>\n</blockquote>\n<p>The value of the media query is either&nbsp;<strong>none</strong> or&nbsp;<strong>hover</strong>. Let's take a look at how it works:</p>\n<pre class=\"language-css\"><code>/* _buttons.scss */\n\n.button {\n    background-color: #1997c6;\n    text-decoration: none;\n\n    &amp;:hover {\n        // Only apply hover styles on devices that support hover\n        @media (hover: hover) {\n            background-color: darken(#1997c6, 10%)\n        }\n    }\n}</code></pre>\n<p>In the example above, on any device that supports hovering over elements will darken the background colour. That's pretty much it!</p>\n<p>&nbsp;</p>\n<h2>Browser Compatibility</h2>\n<p>Browser support for <code class=\"b-inline-code\">@media (hover: hover)</code> is pretty good nowadays.</p>\n<div class=\"ciu_embed\" data-feature=\"css-media-interaction\" data-periods=\"future_1,current,past_1,past_2\" data-accessible-colours=\"false\"><picture><source srcset=\"https://caniuse.bitsofco.de/image/css-media-interaction.webp\" type=\"image/webp\" /><source srcset=\"https://caniuse.bitsofco.de/image/css-media-interaction.png\" type=\"image/png\" /><img src=\"https://caniuse.bitsofco.de/image/css-media-interaction.jpg\" alt=\"Data on support for the css-media-interaction feature across the major browsers from caniuse.com\" /></picture></div>\n<p>Although, there is one problem you may have which is IE if you need to support it. There's a workaround for it though, it just involves using a reset.</p>\n<pre class=\"language-css\"><code>/* _buttons.scss */\n\n.button {\n    background-color: #1997c6;\n    text-decoration: none;\n\n    &amp;:hover {\n        // Hover states are done as normal so it works in IE\n        background-color: darken(#1997c6, 10%);\n          \n        // Reset hover states here for devices that don't support hover\n        @media (hover: none) {\n            background-color: #1997c6;\n        }\n    }\n}</code></pre>\n<p>&nbsp;</p>\n<h2>Conclusion</h2>\n<p>This will solve those issues with buttons persisting their hover styles on mobile. There are a few other interaction media features: \"<strong>pointer</strong>\",&nbsp;\"<strong>any-pointer</strong>\" and \"<strong>any-hover</strong>\". They're worth a read on the <a title=\"All Available Interaction Capabilities: the any-pointer and any-hover features\" href=\"https://www.w3.org/TR/mediaqueries-4/#any-input\" target=\"_blank\" rel=\"noopener\">W3 spec</a>.</p>"
    }
]