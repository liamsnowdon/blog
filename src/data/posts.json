[
    {
        "id": 1,
        "file": "handling-responsive-images.html",
        "imageUrl": "/assets/images/posts/handling-responsive-images/handling-responsive-images.jpeg",
        "author": "Liam Snowdon",
        "title": "Handling responsive images",
        "intro": "Sometimes we want an image to look slightly different across devices or show a different image entirely.",
        "datePosted": "2020-12-24T00:00:00.000Z",
        "category": 1,
        "tags": [
            1
        ],
        "relatedPosts": [],
        "content": "<p>It can be common to render different images in different situations, whether it is for retina screens or for different screen sizes. Depending on the method, it can have a range of advantages:</p>\n<ul>\n<li>A different image may be created specifically for mobile devices which would look better than using the image being used on desktop. This is called <strong>art direction</strong>.</li>\n<li>Having multiple image formats allows you to make the most of a browser's support for image format. It&rsquo;s good to load the best format possible to take full advantage of its benefits. WEBP images for example support animation and has smaller file sizes than JPEGs and PNGs.</li>\n<li>Loading a mobile image on a mobile device instead of a desktop image will likely be smaller in file size which would lead to saving mobile data and faster loading times. There is no need to download a larger image for desktop if we&rsquo;re on a mobile.</li>\n</ul>\n<h2>&nbsp;</h2>\n<h2>Foundation's Interchange</h2>\n<p>If you're using a framework such as Foundation in your project, it may come with a method for handling this scenario. Foundation, for example, ships with <a title=\"Interchange\" href=\"https://get.foundation/sites/docs/interchange.html\" target=\"_blank\" rel=\"noopener\">Interchange</a>, which uses media queries to:</p>\n<blockquote>\n<p>dynamically load responsive content that is appropriate for the user's device.</p>\n</blockquote>\n<p>It allows you to set what images to show on matching media queries. It works well and does exactly what you need for displaying different images across different devices. It does require installing Foundation itself though since it is a part of it. It runs off JavaScript and the media queries definied in your CSS or Sass.</p>\n<p>&nbsp;</p>\n<h2>Image Srcset and Sizes</h2>\n<p>A more HTML native way of handling responsive images is by using the <code class=\"b-inline-code\">srcset</code> and <code class=\"b-inline-code\">sizes</code> attributes for the <code class=\"b-inline-code\">&lt;img&gt;</code> tag.</p>\n<h3>Srcset</h3>\n<p>Adding a <code class=\"b-inline-code\">srcset</code> attribute to an <code class=\"b-inline-code\">&lt;img&gt;</code> tag allows you to provide a list of different sized versions of an image. Each image provided is paired with a&nbsp;<strong>pixel density</strong><strong>&nbsp;descriptor</strong> or a <strong>width descriptor</strong>. This gives the browser information about when each image version should be shown so it knows which one from the list to render on the screen.</p>\n<p>A <strong>pixel density descriptor</strong> refers to the pixel density of the device's display. With this it is possible to render a more detailed high-res version of the image for retina screens. It may look like this:</p>\n<pre class=\"language-markup\"><code>&lt;img\n    src=\"business-cards.jpg\"\n    srcset=\"\n        business-cards-2.jpg 2x,\n        business-cards-4.jpg 4x\n    \"\n    alt=\"Uncoated business cards\"\n&gt;</code></pre>\n<p>A default, standard image should be declared in the <code class=\"b-inline-code\">src</code> attribute as usual and the other versions should be listed in the <code class=\"b-inline-code\">srcset</code>.</p>\n<p>A&nbsp;<strong>width descriptor</strong> tells the browser the width of the image. If the image is 500px wide, as a version inside <code class=\"b-inline-code\">srcset</code> it would look like <code class=\"b-inline-code\">business-cards-500.jpg 500w</code>. Browsers will then try to decide on what's the best image to use based on this information and the current page layout, but what you want may not be exactly what happens. To give the browser a better idea of what image to use in this case, we can use the <code class=\"b-inline-code\">sizes</code> attribute too.</p>\n<h3>Sizes</h3>\n<p>The <code class=\"b-inline-code\">sizes</code> attribute defines a list of media conditions along with the image from <code class=\"b-inline-code\">srcset</code> to choose from. The browser will work its way through those media conditions until one is true and show the image paired with it. If none of the media conditions are true, it will use the default one.</p>\n<pre class=\"language-markup\"><code>&lt;img\n    src=\"business-cards-1024.jpg\"\n    srcset=\"\n        business-cards-480.jpg 480w,\n        business-cards-768.jpg 768w\n        business-cards-1024.jpg 1024w\n    \"\n    sizes=\"\n        (max-width: 600px) 480px,\n        (max-width: 900px) 768px,\n        1024px\n    \"\n    alt=\"Uncoated business cards\"\n&gt;</code></pre>\n<p>In the example above, three images are provided in <code class=\"b-inline-code\">srcset</code> using <strong>width descriptors</strong>. The <code class=\"b-inline-code\">sizes</code> has two media conditions and the default image at 1024px. If we go through them, it is saying:</p>\n<ol>\n<li>If the device width is less than 600px, it will use the 480px image, which is <code class=\"b-inline-code\">business-cards-480.jpg</code> as described by the <code class=\"b-inline-code\">480w</code> width descriptor.</li>\n<li>If the device width is lesss than 900px, it will use the 768px image, which is <code class=\"b-inline-code\">business-cards-768.jpg</code>.</li>\n<li>Otherwise, just use the 1024px image which is <code class=\"b-inline-code\">business-cards-1024.jpg</code>.</li>\n</ol>\n<p>So looking at how we can combine <code class=\"b-inline-code\">srcset</code> and sizes together, we can give the browser more information about which images to show depending on the device width.</p>\n<h3>Browser Compatibility</h3>\n<p>Browser support for <code class=\"b-inline-code\">&lt;img src=\"\" srcset=\"\" sizes=\"\"&gt;</code> is pretty good with the exception of IE.</p>\n<div class=\"ciu_embed\" data-feature=\"srcset\" data-periods=\"future_1,current,past_1,past_2\" data-accessible-colours=\"false\"><picture><source srcset=\"https://caniuse.bitsofco.de/image/srcset.webp\" type=\"image/webp\" /><source srcset=\"https://caniuse.bitsofco.de/image/srcset.png\" type=\"image/png\" /><img src=\"https://caniuse.bitsofco.de/image/srcset.jpg\" alt=\"Data on support for the srcset feature across the major browsers from caniuse.com\" /></picture></div>\n<h2>&nbsp;</h2>\n<h2>&lt;picture&gt; Element</h2>\n<p>It's important to remember that using <code class=\"b-inline-code\">&lt;img src=\"\" srcset=\"\" sizes=\"\"&gt;</code> is for serving different versions of the same image, and gives the browser control over what it thinks is the best image to render at any particular time. However it is common to want to be able to show completely different images depending on the device width for design reasons, stated as&nbsp;<strong>art direction</strong> in the introduction of this article.</p>\n<p>The &lt;picture&gt; element is meant exactly for this, and gives you way more control over what the browser does when rendering the images. Where using the previous method tells the browser to choose the most appropriate image to render based on the layout of the page as well as the viewport width, using the &lt;picture&gt; element will tell the browser exactly what image to render using a media condition.</p>\n<pre class=\"language-markup\"><code>&lt;picture&gt;\n    &lt;source \n        srcset=\"business-cards-1024.jpg\"\n        media=\"(min-width: 1024px)\"\n    &gt;\n    &lt;source \n        srcset=\"business-cards-768.jpg\"\n        media=\"(min-width: 768px)\"\n    &gt;\n    &lt;img src=\"business-cards.jpg\" alt=\"Uncoated business cards\" /&gt;\n&lt;/picture&gt;</code></pre>\n<p>This already looks a lot simpler to understand than using <code class=\"b-inline-code\">&lt;img src=\"\" srcset=\"\" sizes=\"\"&gt;</code>. The <code class=\"b-inline-code\">&lt;picture&gt;</code> element is made up of <code class=\"b-inline-code\">&lt;source&gt;</code> tags, similarly to <code class=\"b-inline-code\">&lt;video&gt;</code> and <code class=\"b-inline-code\">&lt;audio&gt;</code> elements and uses <code class=\"b-inline-code\">srcset</code> and <code class=\"b-inline-code\">media</code> attributes to define the image used for that media condition. The browser will go through the <code class=\"b-inline-code\">&lt;source&gt;</code> tags to find a media condition that is true and render that image in <code class=\"b-inline-code\">srcset</code>. If none of them are true, it will use the &lt;img&gt; as a fallback image.</p>\n<p>You might have noticed it uses srcset like the&nbsp;<strong>Image Srcset and Sizes</strong> section previously. This means we can use similar features in our <code class=\"b-inline-code\">&lt;picture&gt;</code> element for the <code class=\"b-inline-code\">&lt;source srcsets=\"\"&gt;</code>.</p>\n<pre class=\"language-markup\"><code>&lt;picture&gt;\n    &lt;source \n        srcset=\"\n            business-cards-1024-4.jpg 4x\n            business-cards-1024-2.jpg 2x\n            business-cards-1024.jpg\n        \"\n        media=\"(min-width: 1024px)\"\n    &gt;\n    &lt;source \n        srcset=\"\n            business-cards-768-4.jpg 4x\n            business-cards-768-2.jpg 2x\n            business-cards-768.jpg\n        \"\n        media=\"(min-width: 768px)\"\n    &gt;\n    &lt;img src=\"business-cards.jpg\" alt=\"Uncoated business cards\" /&gt;\n&lt;/picture&gt;</code></pre>\n<p>The example above uses&nbsp;<strong>pixel density descriptors</strong> in the <code class=\"b-inline-code\">srcset</code> to render higher resolution versions of the image on displays with higher pixel density.</p>\n<p>That handles our needs for having responsive images in a great way and gives us a lot of control over what the browser renders on the screen. But that's not all we can do with the <code class=\"b-inline-code\">&lt;picture&gt;</code> element! Since the <code class=\"b-inline-code\">media</code> attribute supports media conditions other than <code class=\"b-inline-code\">max-width</code> and <code class=\"b-inline-code\">min-width</code>, we can have different images being shown for a bunch of other conditions such as:</p>\n<ul>\n<li>Not showing animated images for users with <code class=\"b-inline-code\">prefers-reduced-motion</code> accessiblility preference.</li>\n<li>Showing a darker or lighter version of an image based on the <code class=\"b-inline-code\">prefers-color-scheme</code> preference.</li>\n<li>Showing a lower res version of the image for users with the <code class=\"b-inline-code\">prefers-reduced-data</code>.</li>\n</ul>\n<p>Although <code class=\"b-inline-code\">prefers-reduced-data</code> is in early draft in the W3 Media Queries Level 5 spec, it gives you an idea of the potential it can have.</p>\n<h3>Browser Compatibility</h3>\n<p>Again, browser support for the <code class=\"b-inline-code\">&lt;picture&gt;</code> element is great other than IE.</p>\n<div class=\"ciu_embed\" data-feature=\"picture\" data-periods=\"future_1,current,past_1,past_2\" data-accessible-colours=\"false\"><picture><source srcset=\"https://caniuse.bitsofco.de/image/picture.webp\" type=\"image/webp\" /><source srcset=\"https://caniuse.bitsofco.de/image/picture.png\" type=\"image/png\" /><img src=\"https://caniuse.bitsofco.de/image/picture.jpg\" alt=\"Data on support for the picture feature across the major browsers from caniuse.com\" /></picture></div>\n<h2>Conclusion</h2>\n<p>I would say the best thing to use out of the options discussed above is definitely the <code class=\"b-inline-code\">&lt;picture&gt;</code> element as it gives you a lot more control and the browser will do exactly what you tell it, instead of making its own decisions about what image it thinks will be best to use. It's also a lot simpler to write than combining <code class=\"b-inline-code\">srcset</code> and <code class=\"b-inline-code\">sizes</code> together.</p>"
    },
    {
        "id": 2,
        "file": "mobile-button-hover-states.html",
        "imageUrl": "/assets/images/posts/mobile-hover-states/mobile-hover-states.jpeg",
        "author": "Liam Snowdon",
        "title": "Handling button hover states for touchscreen devices",
        "intro": "On mobile devices hover states don't work the same as they do for desktop. The workaround is to use a special media query.",
        "datePosted": "2020-12-16T00:00:00.000Z",
        "category": 2,
        "tags": [
            1
        ],
        "relatedPosts": [
            1
        ],
        "content": "<p>On mobile and touchscreen devices, when an element with a <code class=\"b-inline-code\">:hover</code> pseudo-class is pressed the hover state styles will persist even after the pointing device has been released. This might not be noticeable in many cases if a button takes you to another page, however if not, the issue will arise. This can be solved with using a <strong>hover media query</strong>.</p>\n<p>The W3 spec defines it as the following:</p>\n<blockquote>\n<p>The hover media feature is used to query the user&rsquo;s ability to hover over elements on the page with the primary pointing device. If a device has multiple pointing devices, the&nbsp;hover media feature must reflect the characteristics of the &ldquo;primary&rdquo; pointing device, as determined by the user agent.</p>\n</blockquote>\n<p>The value of the media query is either&nbsp;<strong>none</strong> or&nbsp;<strong>hover</strong>. Let's take a look at the syntax:</p>\n<pre class=\"language-css\"><code>/* _buttons.scss */\n\n.button {\n    background-color: #1997c6;\n    border: 1px solid #1997c6;\n    text-decoration: none;\n\n    &amp;:hover {\n        // Only apply hover styles on devices that support hover\n        @media (hover: hover) {\n            background-color: darken(#1997c6, 10%)\n            border-color: darken(#1997c6, 10%)\n        }\n    }\n}</code></pre>\n<p>In the example above, on any device that supports hovering over elements will darken the background-color and the border-color. That's pretty much it!</p>\n<p>&nbsp;</p>\n<h2>Browser Compatibility</h2>\n<p>Browser support for <code class=\"b-inline-code\">@media (hover: hover)</code> is pretty good nowadays.</p>\n<div class=\"ciu_embed\" data-feature=\"css-media-interaction\" data-periods=\"future_1,current,past_1,past_2\" data-accessible-colours=\"false\"><picture><source srcset=\"https://caniuse.bitsofco.de/image/css-media-interaction.webp\" type=\"image/webp\" /><source srcset=\"https://caniuse.bitsofco.de/image/css-media-interaction.png\" type=\"image/png\" /><img src=\"https://caniuse.bitsofco.de/image/css-media-interaction.jpg\" alt=\"Data on support for the css-media-interaction feature across the major browsers from caniuse.com\" /></picture></div>\n<p>Although, there is one problem you may have which is IE if you need to support it. There's a workaround for it though, it just involves using a reset.</p>\n<pre class=\"language-css\"><code>/* _buttons.scss */\n\n.button {\n    background-color: #1997c6;\n    border: 1px solid #1997c6;\n    text-decoration: none;\n\n    &amp;:hover {\n        // Hover states are done as normal so it works in IE\n        background-color: darken(#1997c6, 10%);\n        border-color: darken(#1997c6, 10%);\n        \n        // Reset hover states here for devices that don't support hover\n        @media (hover: none) {\n            background-color: #1997c6;\n            border-color: #1997c6;\n        }\n    }\n}</code></pre>\n<h2>Conclusion</h2>\n<p>This will solve those issues with buttons persisting their hover styles on mobile. There are a few other interaction media features: \"<strong>pointer</strong>\",&nbsp;\"<strong>any-pointer</strong>\" and \"<strong>any-hover</strong>\". They're worth a read on the <a title=\"All Available Interaction Capabilities: the any-pointer and any-hover features\" href=\"https://www.w3.org/TR/mediaqueries-4/#any-input\" target=\"_blank\" rel=\"noopener\">W3 spec</a>.</p>"
    },
    {
        "id": 3,
        "file": "gulp4.html",
        "datePosted": "2019-12-04T05:12:20.330Z",
        "imageUrl": "/assets/posts/gulp.jpg",
        "author": "Liam Snowdon",
        "title": "Integrating Gulp 4 into your workflow",
        "intro": "There are many build tools out there. Gulp 4 is the new-ish major version of Gulp.js which introduces new features removing the need of other dependencies.",
        "category": 3,
        "tags": [],
        "relatedPosts": [],
        "content": "<p>As dnajsn dkajsdj nakjsndjk nasknd jkansjkdn kjansjkd najksndkj asd ajnsdjj nwjdnj njdwnw.</p>\n<pre class=\"language-markup\"><code>&lt;div&gt;&lt;h3&gt;As snd wnjaknsd&lt;/h2&gt;&lt;p&gt;Asd njwan ksndkankwdn k&lt;/p&gt;&lt;/div&gt;</code></pre>"
    },
    {
        "id": 4,
        "file": "precompiling-nunjucks.html",
        "imageUrl": "/assets/images/posts/precompiling-nunjucks/precompiling-nunjucks.jpeg",
        "author": "Liam Snowdon",
        "title": "Pre-compiling Nunjucks templates with Gulp",
        "intro": "Nunjucks is great for templating your HTML, but it's even better when that markup is pre-compiled at build time.",
        "datePosted": "2020-12-07T00:00:00.000Z",
        "category": 3,
        "tags": [],
        "relatedPosts": [
            3
        ],
        "content": "<p>When your site is spanned across multiple pages and sections, odds are that a lot of your HTML will end up getting duplicated across files. Most commonly it will be your &lt;head&gt; tag, a navigation bar or slider, a footer, etc. This is where a templating engine will come in handy. There are many templating engines out there, some have advantages over the other so you want to find the right one for your needs. To name a few:</p>\n<ul>\n<li>EJS</li>\n<li>Handlebars</li>\n<li>Mustache</li>\n<li>Nunjucks</li>\n<li>...and many more.</li>\n</ul>\n<p>In this post I will be focusing on using Nunjucks and, more specifically, how to integrate it with Gulp for precompiling pages. Nunjucks files have the extension <code class=\"b-inline-code\">.njk</code>, for example: <code class=\"b-inline-code\">index.njk</code>.</p>\n<p>To begin with, let's take a quick look at some of the main features Nunjucks offers.</p>\n<h2>Features</h2>\n<h3>Template Inheritance</h3>\n<p>Nunjucks templates can inherit or <strong>extend</strong>&nbsp;from its parent template. This allows you to create boilerplates for your pages, whether that be the core markup with your metadata, stylesheets and scripts, or a particular page layout like a product page. This is done with two important tags:</p>\n<ol>\n<li>block</li>\n<li>extends</li>\n</ol>\n<p>A parent template may look like this:</p>\n<pre class=\"language-markup\"><code>&lt;!-- base.njk --&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    \n    &lt;title&gt;{% block pageTitle %}Page Title{% endblock %}&lt;/title&gt;\n\n    &lt;link rel=\"stylesheet\" href=\"/assets/css/styles.css\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n    {% block content %}{% endblock %}\n\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>You will see there are two blocks above: <strong>pageTitle</strong> and <strong>content</strong>. Blocks are sections that can be overridden by child templates. Let's see how that works with the&nbsp;<strong>extends</strong> tag.</p>\n<pre class=\"language-markup\"><code>&lt;!-- product-listing.njk --&gt;\n\n{% extends \"base.njk\" %}\n\n{% block pageTitle %}Browse our range of products{% endblock %}\n\n{% block content %}\n  &lt;header class=\"l-header\"&gt;\n    &lt;div class=\"l-header__content\"&gt;\n      &lt;h1 class=\"l-header__heading\"&gt;Our Products&lt;/h1&gt;\n    &lt;/div&gt;\n  &lt;/header&gt;\n{% endblock %}</code></pre>\n<p>The&nbsp;<strong>extends</strong> tag is used to tell Nunjucks what file to inherit from as its parent. The <strong>block</strong> tags are then used to inject that content where the blocks appear in the inherited template. Take a look at the output:</p>\n<pre class=\"language-markup\"><code>&lt;!-- product-listing.html --&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    \n    &lt;title&gt;Browse our range of products&lt;/title&gt;\n\n    &lt;link rel=\"stylesheet\" href=\"/assets/css/styles.css\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n    &lt;header class=\"l-header\"&gt;\n      &lt;div class=\"l-header__content\"&gt;\n        &lt;h1 class=\"l-header__heading\"&gt;Categories&lt;/h1&gt;\n      &lt;/div&gt;\n    &lt;/header&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<h3>Partials</h3>\n<p>One of the most popular features of templating engines is the ability to include partials into your templates. These are commonly headers, navigations, pods, footers, etc. This is done by using the&nbsp;<strong>include</strong> tag, like this:</p>\n<pre class=\"language-markup\"><code>{% include \"partials/sticky-navigation.njk\" %}</code></pre>\n<p>This would inject that partial template wherever it is used. Oftentimes though you will need to render a partial with some data, for example a product pod will have the product's name, image, description, etc. This is done by using macros.</p>\n<h3>Macros</h3>\n<p>Macros can be thought of as partials that have access to the data that you pass it when it is called. It is called similarly to a standard function where you pass in the data as a parameter. Consider this macro:</p>\n<pre class=\"language-markup\"><code>&lt;!-- product-macro.njk --&gt;\n\n{% macro pod(product) %}\n  &lt;div class=\"c-pod\"&gt;\n    &lt;div class=\"c-pod__image c-pod__image--{{ product.alias }}\"&gt;&lt;/div&gt;\n    &lt;div class=\"c-pod__content\"&gt;\n      &lt;h5 class=\"c-pod__title\"&gt;{{ product.name }}&lt;/h4&gt;\n      &lt;p class=\"c-pod__description\"&gt;\n        {{ product.description }}\n      &lt;/p&gt;\n      \n      &lt;div class=\"c-pod__button-holder\"&gt;\n        &lt;a class=\"c-button\" href=\"/products/{{ product.alias }}\"&gt;Shop now&lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n{% endmacro %}</code></pre>\n<p>This product pod displays the product's image, name, description and a link to the product page. We can now use this macro in our templates. If it's used in a different file it will need to be imported using the&nbsp;<strong>import</strong> tag. It is then called like a standard function.</p>\n<pre class=\"language-markup\"><code>&lt;!-- business-cards.njk --&gt;\n\n{% extends 'product-page.njk' %}\n\n{% import 'macros/product-macro.njk' as productMacro %}\n\n&lt;!-- you can use the set tag to set a variable. You will notice the \"| getById(8)\" filter at the end. We will discuss this in the next section --&gt;\n{% set product = products | getById(8) %}\n\n{% block productPod %}\n  {{ productMacro.pod(product) }}\n{% endblock %}</code></pre>\n<p>Looking inside the&nbsp;<strong>productPod</strong> block, it would render something like:</p>\n<pre class=\"language-markup\"><code>&lt;!-- business-cards.html --&gt;\n\n&lt;div class=\"c-pod\"&gt;\n    &lt;div class=\"c-pod__image c-pod__image--business-cards\"&gt;&lt;/div&gt;\n    &lt;div class=\"c-pod__content\"&gt;\n      &lt;h5 class=\"c-pod__title\"&gt;Business Cards&lt;/h4&gt;\n      &lt;p class=\"c-pod__description\"&gt;\n        This is the business cards description.\n      &lt;/p&gt;\n      \n      &lt;div class=\"c-pod__button-holder\"&gt;\n        &lt;a class=\"c-button\" href=\"/products/business-cards\"&gt;Shop now&lt;/a&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;</code></pre>\n<p>You can see how powerful macros can be when rendering partials with custom data.</p>\n<h3>Filters</h3>\n<p>Filters are another powerful feature of Nunjucks and allow you to manipulate data to JavaScript's limit. There are a number of built-in filters in Nunjucks but you are able to add custom filters for your particular needs. It uses the same syntax as filters from popular frameworks like Vue and Angular:</p>\n<pre class=\"language-markup\"><code>&lt;!-- index.njk --&gt;\n\n&lt;!-- built in filter for transforming string to lowercase --&gt;\n{{ product.name | lower }}\n\n&lt;!-- custom filter for getting an object from an array by its ID --&gt;\n{% set product = products | getById(8) %}</code></pre>\n<h2>Integrating Nunjucks with Gulp</h2>\n<p>Using Nunjucks in the browser means all the templating is done on the client side at runtime. With Gulp, we can build all the pages using templates, partials and macros at buildtime so all the HTML files are all ready for when a user visits the page. Note: we will be using Gulp 4 in the following code snippets, feel free to rewrite it in an older version if you prefer.</p>\n<p>This is the file structure we will use with Gulp:</p>\n<p><img src=\"assets/images/posts/nunjucks-file-structure.jpg\" alt=\"The file structure used with Nunjucks and Gulp\" /></p>\n<p>The Gulp plugin we will be using is&nbsp;<strong>gulp-nunjucks-render</strong>. Let's install it with NPM and add it to our gulpfile.</p>\n<pre class=\"language-markup\"><code>npm install gulp-nunjucks-render --save-dev</code></pre>\n<pre class=\"language-javascript\"><code>const nunjucksRender = require('gulp-nunjucks-render');\n\nfunction nunjucks () {\n    // Gets .html and .njk files in pages folder\n    return gulp.src('pages/**/*.+(html|njk)')\n        // Renders template with nunjucks\n        .pipe(nunjucksRender({\n            path: ['templates']\n        }))\n        .pipe(gulp.dest('./'));\n}\n\nexports.nunjucks = nunjucks;</code></pre>\n<p>Nothing special here with the function, it behaves like any other Gulp task.</p>\n<ol>\n<li>Nunjucks files are sourced from the pages directory and looks for <code class=\"b-inline-code\">.html</code> or <code class=\"b-inline-code\">.njk</code> files (it will work for either)</li>\n<li>Pipes it through <code class=\"b-inline-code\">gulp-nunjucks-render</code> plugin and we specify the directory the templates are located (these are the partials, macros, boilerplates, etc).</li>\n<li>The built HTML files are placed in the destination directory.</li>\n</ol>\n<p>The difference between&nbsp;<strong>pages</strong> and&nbsp;<strong>templates</strong> is the built HTML files come from the&nbsp;<strong>pages</strong> nunjucks files, whereas the&nbsp;<strong>templates</strong> files are included in others.</p>\n<h3>Injecting data into our pages and templates</h3>\n<p>We discussed macros earlier and how they accept data when rendering, but where does this data come from? With Gulp we can globally add data to all Nunjucks files. We can store this data in JSON files. Let's continue with the product theme and say we have the following JSON file:</p>\n<pre class=\"language-javascript\"><code>[\n    {\n        \"id\": 1,\n        \"name\": \"Business Cards\",\n        \"alias\": \"business-cards\",\n        \"description\": \"This is the business cards description.\" \n    },\n    {\n        \"id\": 2,\n        \"name\": \"Postcards\",\n        \"alias\": \"postcards\",\n        \"description\": \"This is the postcards description.\" \n    },\n]</code></pre>\n<p>&nbsp;To get this data into the Nunjucks files, we can use the <code class=\"b-inline-code\">manageEnv</code> property when piping through in the Gulp task. We will use <code class=\"b-inline-code\">fs</code> to read the JSON file.</p>\n<pre class=\"language-javascript\"><code>const fs = require('fs');\n\nconst manageEnv = (env) =&gt; {\n    const products = JSON.parse(fs.readFileSync('products.json'));\n\n    env.addGlobal('data', {\n        products\n    });\n};\n\nfunction nunjucks () {\n    // Gets .html and .njk files in pages folder\n    return gulp.src('pages/**/*.+(html|njk)')\n        // Renders template with nunjucks\n        .pipe(nunjucksRender({\n            path: ['templates'],\n            manageEnv\n        }))\n        .pipe(gulp.dest('./'));\n}</code></pre>\n<p>When in any Nunjucks file, including partials and macros, you now have access to the products under <code class=\"b-inline-code\">data.products</code>.</p>\n<h3>Adding custom filters</h3>\n<p>We can add custom filters inside this <code class=\"b-inline-code\">manageEnv</code> property too. Instead of using the <code class=\"b-inline-code\">addGlobal</code> method, <code class=\"b-inline-code\">addFilter</code> is used.</p>\n<pre class=\"language-javascript\"><code>env.addFilter('getById', (array, id) =&gt; {\n    return array.find(item =&gt; item.id === id);\n});</code></pre>\n<p>Now we can make use of that filter in Nunjucks tags.</p>\n<pre class=\"language-markup\"><code>&lt;!-- this will return the business cards object from products.json --&gt;\n{% set product = data.products | getById(1) %}</code></pre>"
    }
]